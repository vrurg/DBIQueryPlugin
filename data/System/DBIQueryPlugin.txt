%META:TOPICINFO{author="VadimBelman" comment="" date="1443825457" format="1.1" reprev="2" version="2"}%
%META:TOPICPARENT{name="Plugins"}%
---+!! Empty Plugin

%SHORTDESCRIPTION%

%TOC%

---++ Overview

This plugin is intended to provide Foswiki with ability to make complex database requests using DBI Perl module.

%X% Any help with this documentation is very much welcome as it's really pretty far from being ideal. Thanks a lot!

---++ Syntax Rules

__Examples:__

<pre>
%<nop>DBI_QUERY{"db_identifier" ...}%
SELECT ...
.header
head
.body
%column%
%<nop>DBI_SUBQUERY{"name"}%
.footer
footer
%DBI_QUERY%

%<nop>DBI_DO{"db_identifier" ...}%
# Some Perl code.
%DBI_DO%

%<nop>DBI_DO{"db_identifier" topic="SomeTopic" script="some_script"}%

%<nop>DBI_CALL{"subquery"}%

%<nop>DBI_CODE{...}%
# Some Perl Code
%DBI_CODE%
</pre>

---++ Syntax
#DbiQuerySyntax
%INCLUDE{VarDBI_QUERY}%

#DbiDoSyntax
%INCLUDE{VarDBI_DO}%

#DbiCallSyntax
%INCLUDE{VarDBI_CALL}%

#DbiCodeSyntax
%INCLUDE{VarDBI_CODE}%

---++ How it works

---+++ DBI_QUERY

This plugin has been written with the idea in mind that table is not the
only way to represent database content. Therefore some more flexibility is
required in order to format a query result. Yet, what could provide more
control over the output than templates keeping it all as simple as
possible?

With this view in mind we come to the following procedure:

   1. Every query definition within topic is parsed and stored for further processing. This is done in two major steps:
      1. Query statement is exctracted from the definition.
      1. Every newline within =.header=, =.body=, and =.footer= gets changed with space except for the last ones. They're removed. Whereas newline is needed =\n= escape sequence must be used. Consequently, =\\n= is translated into =\n=.
   1. All queries are processed except for those declared as subqueries:
      1. =.header= filter is expanded with [[#VariableExpansion][variable expansion]] mechanizm and put into the output.
      1. The query statement is expanded using !DBIQueryPlugin and %WIKITOOLNAME% variable expansion mechanisms in the order they are mentioned here.
      1. Database is queried and data is fetched row-by-row. Each row data get [[#ValueQuoting][quoted]] and then used for setting !DBIQueryPlugin variables. =.body= filter is expanded using these values.
      1. =.footer= filter is expanded with !DBIQueryPlugin mechanism and put into the output.
      1. Afterwards we let %WIKITOOLNAME% to deal with the output (expand variables, pass it through other plugins, whatsoever).

#VariableExpansion
---++++ Variable Expansion

The first step of expansion is done by changing every =%column%= variable
found in a text being expanded with corresponding value from the database.
Variable names are in fact table column names as they're declared in the
SQL statement and returned by
[[http://search.cpan.org/~timb/DBI-1.48/DBI.pm#fetchrow_hashref][DBI
module]]. =NAME_lc= case conversion performed so that every name is in
lowercase. For instance, the following =SELECT=:

<pre>
SELECT
    Name,
    PersonalID,
    SomeOtherInfo
  FROM
    PersonData
</pre>

would provide us with variables =%name%=, =%personalid%=, =%someotherinfo%=.

There are some special cases like !MySQL's =SHOW CREATE PROCEDURE= where
column names may contain spaces within them. These spaces are changed with
undersocre sign making it possible to refer to them as to database columns.
I.e. 'Create Procedure' field may be referred as =%<nop>create_procedure%=.

The second step is [[#ProcSubqueries][subquery processing]].
=%DBI_SUBQUERY{"subqueryname"}%= statements are replaced with output from
corresponding subqueries. All currently defined variables are passed to the
subquery making it possible to use them for SQL statement, header and
footer expansion.

#ValueQuoting
---++++ Quoting of Values

Values fetched from database are quoted using
=[[http://search.cpan.org/~lds/CGI.pm-3.11/CGI.pm#AUTOESCAPING_HTML][CGI::escapeHTML()]]=
unless otherwise ordered by =unquoted= parameter. Then every
newline character is changed with %WIKITOOLNAME% variable =%<nop>BR%=.

#ProcSubqueries
---++++ Subqueries

Subqueries are processed in same manner as common queries. The only thing
which makes them slightly different in behaviour is the fact that they can
use column values (variables) from the parent queries. It is also possible
to have a chain of subqueries: <code>top_query -&gt; subquery1 -&gt;
subquery2 -&gt; ...</code>, in which case all variables from all the
calling queries are accessible.

For instance, in the following code:

<pre>
%<nop>DBI_QUERY{...}%
SELECT
    col1, col2
  FROM
    someTable
  WHERE
    col3 = %parent_query_col1%
.body
...
%DBI_QUERY%
</pre>

we choose only the rows which are somehow related to a row in a parent query. Of course, relatively similar approach would be to use nested =SELECT= in the parent query SQL statement. Yet, this would be faster. But there are old versions of !MySQL where nested =SELECT= is not supported. And there are situations when some more output formatting is needed. Or one could form header and/or footer using data contained in database.

<div style="padding-left: 4em">
%X% %RED% __Warning:__ %ENDCOLOR% Column names may overlap with parent queries. In this case parent has influence over child's SQL statement, header and footer definitions; whereas =.body= uses subquery column names. Take care of this! Best of all avoid this situation by using SQL aliasing:

__Parent:__

<pre>
SELECT col1 as parent_col1
....
</pre>

__Subquery:__

<pre>
SELECT col1 as subquery_col1
...
</pre>
</div>

%T% *Note:* Subqueries could also be called recursively. Although a single query could not be called more than 100 times in a row. This number is presently hardcoded but will become part of plugin settings in future.

#DbiDo
---+++ DBI_DO

First of all it shall be stated that =%<nop>DBI_DO%= can implement all
required functionality. In other words, one could say that
=%<nop>DBI_QUERY%= becomes obsolete. This is obvious from
[[#DbiDoSyntax][the syntax description]]. But it also implies that
=%<nop>DBI_DO%= is:

   * a security risk (see [[#AccessControl][Access Control]]);
   * too complicated for most queries;

Besides, =%<nop>DBI_QUERY%= hides quite a number of boring implementation details from a user.

So, let's define =%<nop>DBI_DO%= as a last resort method when nothing else could do the job.
Or, in other words, it is another way of creating a %WIKITOOLNAME% application.

---++++ Implementation

As it was stated in [[#DbiDoSyntax][syntax section]], =%<nop>DBI_DO%= can
fetch a script from another topics which would either represent the whole
script or contain =%<nop>DBI_CODE%= declarations. In both cases the script
is visible on the topic's page. For instance, the following declaration:

<pre>
%<nop>DBI_CODE{"test"}%
if ($varParams{test}) {
    $rc = "This is test.";
} else {
    $rc = "This is for real.";
}
%<nop>DBI_CODE%
</pre>

would output table like this:

<table width="100%" border="0" cellspacing="5px">
  <tr>
    <td nowrap> *Script name* </td>
    <td> =test= </td>
  </tr>
  <tr valign="top">
    <td nowrap> *Script code* </td>
    <td> <pre>
if ($varParams{test}) {
    $rc = "This is test.";
} else {
    $rc = "This is for real.";
}
</pre> </td>
  </tr>
</table>

One can make it looking a bit more pretty with a kind of source highlighting plugin<sup>[[#ShNote1][1]]</sup>:

<pre>
%<nop>DBI_CODE{"test"}%
%<nop>CODE{"perl"}%
if ($varParams{test}) {
    $rc = "This is test.";
} else {
    $rc = "This is for real.";
}
%<nop>ENDCODE%
%<nop>DBI_CODE%
</pre>

<table border="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td nowrap="nowrap"> <strong>Script name</strong> </td>
    <td> <code>test</code> </td>
  </tr>
  <tr valign="top">
    <td nowrap="nowrap"> <strong>Script code</strong> </td>
    <td> 
<div class="dbiq_codefragment">
<pre><i><b><font color="#000080">if</font></b></i> <font color="#000000">(</font><font color="#993399">$varParams</font><font color="#000000">{</font>test<font color="#000000">}</font><font color="#000000">)</font> <font color="#000000">{</font>
     <font color="#993399">$rc</font> <font color="#000000">=</font> <font color="#0000ff">"This is test."</font><font color="#000000">;</font>
<font color="#000000">}</font> <i><b><font color="#000080">else</font></b></i> <font color="#000000">{</font>
     <font color="#993399">$rc</font> <font color="#000000">=</font> <font color="#0000ff">"This is for real."</font><font color="#000000">;</font>
<font color="#000000">}</font>
</pre>
<p>
</p></div>
 </td>
  </tr>
</tbody></table>

#ShNote1
<blockquote>
<sup>1</sup> The sample has been generated using outdated !SourceHighlighPlugin. Other plugins may generate different output.
</blockquote>

=%<nop>DBI_DO%= knows about existence of =%<nop>CODE%/%<nop>ENDCODE%= and
attempts to strip these tags out when the script is been fetched from a
topic. After that Perl code becomes a part of an anonymous =sub=.  Several
variables are available to the code:

|*Variable*|*Description*|
|=$dbh=|Database connection handle.|
|=$request=|A request object as returned by =%WIKITOOLNAME%::Func::getRequestObject()=. Mostly compatible with CGI module API.|
|=$varParams=|Parameters specified in =%<nop>DBI_DO{...}%=. User can put any number of addition parameters there besides those described in [[#DbiDoSyntax][syntax section]].|
|=$dbRecord=|Last fetched by =%<nop>DBI_QUERY%= database record or =%<nop>DBI_CALL%= parameters.|
|=%httpParams=|HTTP parameters as returned by =CGI::param()= method. Note the =multivalued= parameter in the [[#DbiDoSyntax][syntax section]].|

Since the =sub= is executed within plugin's module namespace all internal functions and variables are directly accessible. The most useful of them are described below.

There is one special variable =$rc=. A value assigned to it is the value returned by =sub= and put into the output then. In this way one could display a error message or notification or form any kind of %WIKITOOLNAME%/HTML code.

---++++ Useful functions

DatabaseContrib API is available to a script. Additionally the following plugin functions could be handy within a script:

   $ =subQuery($subquery, $dbRecord) -&gt; $text=: Implements =%<nop>DBI_SUBQUERY%= and =%<nop>DBI_CALL%=. =$subquery= is the name of subquery to be called. =$dbRecord= has the same meaning as corresponding =sub= parameter. Returns output of the subquery.
   $ =expandColumns($text, $dbRecord) -&gt; $text=: Expands variables within =$text= as described in [[#VariableExpansion][DBIQueryPlugin Expansion]] and returns the result.
   $ =protectValue($text) -&gt; $text=: Returns =$text= modified in a way that prevents it from %WIKITOOLNAME% processing.
   $ =wikiErrMsg(@msg) -&gt; $errorMessage=: Formats error messages.

#PluginConfig
---+++ Database connection configuration

This plugin relies on the DatabaseContrib to provide
the connection to a DBI database. Please see the contrib for documentation
of how to specify the database connection.

Below is an example of the configuration of two database connections,
=connection1= and =test=, to be inserted into the =DatabaseContrib= section
of the =configure= script.

<blockquote style="background-color:#f5f5f5">
<pre>
    connection1 => {
        usermap => {
            AdminGroup => {
                user => 'dbuser1',
                password => 'dbpassword1',
            },
            SpecialGroup => {
                user => 'specialdb',
                password => 'specialpass',
            },
        },
        user => 'guest',
        password => 'guestpass',
        driver => 'mysql',
        database => 'some_db',
        codepage => 'koi8r',
        host => 'your.server.name',
    },
    test => {
        usermap => {
            AdminGroup => {
                user => 'dbuser2',
                password => 'dbpassword2',
            },
            SomeUser => {
                user => 'someuser',
                password => 'somepassword',
            },
        },
        allow_do => {
            default => [qw(AdminGroup)],
            'Sandbox.SomeUserSandbox' => [qw(AdminGroup SpecialGroup)],
        },
        allow_query => {
            'Sandbox.SomeQueryTopic' => [qw(WikiGuest)],
        },
        #user => 'nobody',
        #password => 'never',
        driver => 'mysql',
        database => 'test',
        # host => 'localhost',
    }
</pre>
</blockquote>

#AccessControl
---+++ Access Control

This plugin relies on the DatabaseContrib [[DatabaseContrib#AccessControl][access control] API. For middle-level access
control DBIQueryPlugin uses two keys to check for two levels of access:

|*Key name*|*Variable*|*Inherits from*|*Description*|
|allow_do|[[#DbiDoSyntax][=DBI_DO=]|<nop>|Access granted to possibly destructive actions|
|allow_query|[[#DbiQuerySyntax][=DBI_QUERY=]],[[#DbiCallSyntax][=DBI_CALL=]]|=allow_do=|Access granted for querying only|

---++ Drawback and problems

Working with a database isn't a simple task, in common. With this plugin I
was trying to make it both as simple as possible and flexible same time.
Balancing between these two extremes led to some compromises and side
effects.

The biggest compromise was usage of Perl inlines for =%<nop>DBI_DO%=. The
first approach was to make it working much like =%<nop>DBI_QUERY%=, using
sections of declarations. But the more quiestions like:

   * how to check data consistency?
   * how to validate data?
   * how to generate error messages?

and several others of the kind was arising, the more final structure was
looking like a new language. So, why developing a new one when Perl is out
there?  But then again, as it was mentioned before, this way is not
secure-enough and an administrator must take serious considerations before
allowing usage of =%<nop>DBI_DO%= to a user.

The other issue is about plugin execution order. As one can see from
!MessageBoard example, attached to this topic, usage of other plugins could
significally improve control over !DBIQueryPlugin output. However, it is
not guaranteed that another plugin would not be called in first place
causing unpredictable results like unwanted changes in a Perl script.

Considering this issue the decision was made that !DBIQueryPlugin must act
as a preprocessor. For those familiar with %WIKITOOLNAME% guts, it does all
the job in =beforeCommonTagsHandler()= routine. This approach has three
major drawbacks:

   * First of all, it doesn't really follow the guidelines.
   * It breaks common logic of page analysis. Consider the following example:

         <pre>
         %<nop>CALC{"$SET(var,1)"}%
         %<nop>DBI_QUERY{"..."}%
         SELECT ...
           WHERE
             field = %<nop>CALC{"$GET(var)"}%
         %DBI_QUERY%
         </pre>

     One will not get what would be expected because at the time =%<nop>CALC{"$GET(var)"}%= is executed =%<nop>CALC{"$SET(var,1)"}%= has not been called yet! The only way to have it be done properly is to put the latter just next to =%<nop>DBI_QUERY{...}%= line.

   * =%<nop>INCLUDE{}%= would not work because =beforeCommonTagsHandler()= is not called for included topics.

The last issue was the cause to implement classic plugin handling when it
is requested during the inclusion procedure. Possible side effects of this
hack are not studied yet and may cause some headache.

---++ Plugin Settings

Databases available to end user have to be preconfigured with
[[DatabaseContrib#DatabaseConfig][DatabaseConfig database configuration]]
using %WIKITOOLNAME% configure script.

Additionally the following coniguration keys of ={Plugins}{DBIQueryPlugin}= configuration section are available:

|*Configuration Key*  |  *Default value*|*Description*|
|*Debug*  |  =false=|Generate additional debug output|
|*maxRecursionLevel*  |  100|How many nested subquery calls of a same query are allowed before it's considered a too deep recursion|

<!--
   * One line description
      * Set SHORTDESCRIPTION = Make complex database queries using DBI Perl module
-->

---++ Installation
%$INSTALL_INSTRUCTIONS%

---++ Info

Dependencies: %$DEPENDENCIES%

%META:FORM{name="PackageForm"}%
%META:FIELD{name="Author" title="Author" value="VadimBelman"}%
%META:FIELD{name="Version" title="Version" value="%25$VERSION%25"}%
%META:FIELD{name="Release" title="Release" value="%25$RELEASE%25"}%
%META:FIELD{name="Repository" title="Repository" value="https://github.com/foswiki/distro"}%
%META:FIELD{name="Copyright" title="Copyright" value="%25$CREATEDYEAR%25, VadimBelman, All Rights Reserved"}%
%META:FIELD{name="License" title="License" value="GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]])"}%
%META:FIELD{name="Home" title="Home" value="http://foswiki.org/Extensions/%25$ROOTMODULE%25"}%
%META:FIELD{name="Support" title="Support" value="http://foswiki.org/Support/%25$ROOTMODULE%25"}%
